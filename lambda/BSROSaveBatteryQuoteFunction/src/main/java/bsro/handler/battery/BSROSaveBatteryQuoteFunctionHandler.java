package bsro.handler.battery;

import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import bsro.dynamodb.mapper.battery.engine.AutoGeneratedKeys;
import bsro.dynamodb.mapper.battery.engine.BatteryQuote;
import bsro.dynamodb.mapper.battery.engine.BatteryQuote.Battery;
import bsro.dynamodb.mapper.battery.engine.BatteryQuote.Vehicle;
import bsro.dynamodb.mapper.battery.engine.Product;
import bsro.dynamodb.mapper.battery.engine.BatterySearch;
import bsro.webservice.BSROWebServiceResponse;
import bsro.webservice.BSROWebServiceResponseCode;
import bsro.webservice.error.Errors;
import bsro.handler.battery.validation.BatteryQuoteValidation;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.SaveBehavior;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;

public class BSROSaveBatteryQuoteFunctionHandler implements RequestHandler<Object, Object> {

    public Object handleRequest(Object input, Context context) {
    	context.getLogger().log("Save Battery Quote Input: " + input);
    	
    	HashMap<String, String> mapInput = (HashMap<String, String>) input;
		String storeNumber = mapInput.get("storeNumber");
		String productCode = mapInput.get("productCode");
		String zip = mapInput.get("zip");
		String year = mapInput.get("year");
		String make = mapInput.get("make");
		String model = mapInput.get("model");
		String engine = mapInput.get("engine");
		
		BSROWebServiceResponse response = new BSROWebServiceResponse();
		
		if (BatteryQuoteValidation.isNullOrEmpty(storeNumber) || BatteryQuoteValidation.isNullOrEmpty(productCode) || BatteryQuoteValidation.isNullOrEmpty(year) || BatteryQuoteValidation.isNullOrEmpty(model) || BatteryQuoteValidation.isNullOrEmpty(make) || BatteryQuoteValidation.isNullOrEmpty(engine) || BatteryQuoteValidation.isNullOrEmpty(zip)){
			return getValidationMessage(BatteryQuoteValidation.getErrorMessage(storeNumber,productCode,year,make,model,engine,zip));
		}
		
        AWSCredentials creds = new BasicAWSCredentials("AKIAIWQOW2UUYPMOG2VQ","T3NHKV0FayMEeHHpwixdguEE7RIPyZywHdESE1ps");
        AmazonDynamoDBClient dyndbclient = new AmazonDynamoDBClient(creds);
        DynamoDBMapper mapper = new DynamoDBMapper(dyndbclient);
        
        Long quoteId = getQuoteId(mapper,productCode);
        Product product = getProductDetail(mapper,productCode);
        
        if(product==null){
        	Errors errors = new Errors();
    		errors.getGlobalErrors().add("InvalidProductCode");
    		response.setErrors(errors);
    		response.setStatusCode(BSROWebServiceResponseCode.VALIDATION_ERROR.name());
    		response.setPayload(null);
    		return response;
        }
        
        BatteryQuote batteryQuote = new BatteryQuote();
        
        batteryQuote.setQuoteId(quoteId);
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date dateobj = new Date();
		batteryQuote.setCreatedDate(df.format(dateobj));
		
		// no firstname and lastname passed while saving the battery quote
		//batteryQuote.setFirstName(null);
		//batteryQuote.setLastName(null);
		
		batteryQuote.setStoreNumber(Long.parseLong(storeNumber));
		batteryQuote.setZip(zip);
		batteryQuote.setDonationAmount(Double.parseDouble("0"));
		batteryQuote.setDonationName("0");
		batteryQuote.setDonationArticle("");
		
		Short quantity = 1;
		batteryQuote.setQuantity(quantity);
		batteryQuote.setPriceForQuantity(quantity.doubleValue() * product.getWebPrice().doubleValue());
		batteryQuote.setInstallationForQuantity(quantity.doubleValue() * product.getInstallationAmount().doubleValue());
		batteryQuote.setSubtotal(roundOfValue((product.getInstallationAmount().doubleValue() + product.getWebPrice().doubleValue()) * quantity));
		batteryQuote.setTotal(roundOfValue(batteryQuote.getSubtotal() + batteryQuote.getDonationAmount()));
		batteryQuote.setIsEligibleForBatteryRebate(false);
		
        Battery battery = getBatteryObject(product);
        Vehicle vehicle = getVehicleObject(mapper,year+"-"+make.toLowerCase()+"-"+model.toLowerCase()+"-"+engine.toLowerCase());
        
        if(vehicle==null){
        	Errors errors = new Errors();
    		errors.getGlobalErrors().add("Invalid Year, Make, Model, engine");
    		response.setErrors(errors);
    		response.setStatusCode(BSROWebServiceResponseCode.VALIDATION_ERROR.name());
    		response.setPayload(null);
    		return response;
        }
        
        batteryQuote.setBattery(battery);
        batteryQuote.setVehicle(vehicle);
       
        try {
        	mapper.save(batteryQuote, new DynamoDBMapperConfig(DynamoDBMapperConfig.SaveBehavior.CLOBBER));
        } catch (AmazonServiceException ase) {
        	context.getLogger().log("Exception Occured while saving Battery quote : " + ase.getMessage());
            response.setMessage("Exception Occured while saving Battery quote : " + ase.getMessage());
			response.setStatusCode(BSROWebServiceResponseCode.BUSINESS_SERVICE_ERROR.name());
			return response;
        } catch (AmazonClientException ace) {
        	context.getLogger().log("Exception Occured while saving Battery quote : " + ace.getMessage());
        	response.setMessage("Exception Occured while saving Battery quote : " + ace.getMessage());
			response.setStatusCode(BSROWebServiceResponseCode.BUSINESS_SERVICE_ERROR.name());
			return response;
        }
		response.setStatusCode(BSROWebServiceResponseCode.SUCCESSFUL.toString());
		response.setPayload(batteryQuote);
      
        return response;
    }
    
    private Battery getBatteryObject(Product product){
    	
    	Battery battery = new Battery();
    	battery.setHasPricing(true);
		battery.setProductName(product.getProductName());
		battery.setProductCode(product.getProductCode());
	    battery.setProduct(product.getProductType());
	    battery.setPartNumber(product.getPartNumber());
	    battery.setTotalWarrantyMonths(product.getTotalWarranty());
	    battery.setReplacementWarrantyMonths(product.getReplacementWarranty());
	    battery.setPerformanceWarrantyMonths(product.getTotalWarranty());
	    battery.setColdCrankingAmps(product.getCca());
	    battery.setReserveCapacityMinutes(product.getRcMinutes());
	    battery.setWebPrice(product.getWebPrice());
	    battery.setTradeInCredit(product.getTradeinCredit());
	    battery.setInstallationAmount(product.getInstallationAmount());
	    battery.setSalesText(product.getSalesText());
	    battery.setRegularPrice(product.getRegularPrice());
	    battery.setDiscountAmount(product.getDiscountAmount());
	    
    	return battery;
	}
    
	private Vehicle getVehicleObject(DynamoDBMapper mapper, String searchResult){
		Vehicle vehicle = new Vehicle();	
		Map<String, AttributeValue> eav = new HashMap<String, AttributeValue> ();
        eav.put(":s", new AttributeValue().withS(searchResult));
        
        DynamoDBQueryExpression<BatterySearch> queryExpression = new DynamoDBQueryExpression<BatterySearch>()
        		.withIndexName("SearchResult-index")
		        .withConsistentRead(false)
		        .withKeyConditionExpression("SearchResult = :s")
		        .withExpressionAttributeValues(eav);
        List<BatterySearch> batteryList = mapper.query(BatterySearch.class, queryExpression);
        if(vehicle!=null){
			vehicle.setYear(batteryList.get(0).getYear().toString());
	        vehicle.setMake(batteryList.get(0).getMake());
	        vehicle.setModel(batteryList.get(0).getModel());
	        vehicle.setEngine(batteryList.get(0).getEngine());
        }
	    return vehicle;
	}
    
    private Product getProductDetail(DynamoDBMapper mapper,String productCode){
    	Product product = mapper.load(Product.class, productCode, 
                new DynamoDBMapperConfig(DynamoDBMapperConfig.ConsistentReads.CONSISTENT));
    	return product;
	}
    
    private Long getQuoteId(DynamoDBMapper mapper,String productCode){
    	Long quoteId = null;
    	AutoGeneratedKeys keys = mapper.load(AutoGeneratedKeys.class, 1, 
                new DynamoDBMapperConfig(DynamoDBMapperConfig.ConsistentReads.CONSISTENT));
    	 quoteId = keys.getQuoteId();
    	keys.setQuoteId(quoteId+1);
    	DynamoDBMapperConfig dynamoDBMapperConfig = new DynamoDBMapperConfig(SaveBehavior.UPDATE);
    	mapper.save(keys, dynamoDBMapperConfig);
    	return quoteId;
	}
    
    private BSROWebServiceResponse getValidationMessage(String message){
		BSROWebServiceResponse response = new BSROWebServiceResponse();
		Errors errors = new Errors();
		errors.getGlobalErrors().add(message);
		response.setErrors(errors);
		response.setStatusCode(BSROWebServiceResponseCode.VALIDATION_ERROR.name());
		response.setPayload(null);
		return response;
	}
    
    private Double roundOfValue(Double value)
	{
    	DecimalFormat df = new DecimalFormat("#.00");
		if (!BatteryQuoteValidation.isNullOrEmpty(value.toString()))
			return (Double.valueOf(df.format(value)));
		else
			return null;
	}
}
