package com.bfrc.pojo.store;

import com.bfrc.framework.dao.store.LocatorOperator;
import com.bfrc.framework.util.StringUtils;

/**
 * Store generated by hbm2java
 */

public class StoreSearchResult implements java.io.Serializable {
	private String address, city, state, zip, geoPoint;
    private LocatorOperator locator;
    private Float[] location;

    public Float[] getLocation() {
	return location;
}
public void setLocation(Float[] location) {
	this.location = location;
}
    public LocatorOperator getLocator() {
	return locator;
}
public void setLocator(LocatorOperator locator) {
	this.locator = locator;
}
    
private Integer radius;
    //--default is 3 == --//
    /*
      0-10
      1-25
      2-50
      3-100
      4-150
      5-250
     */
public Integer getRadius() {
    if(radius == null || radius.intValue() <=0 )
            return new Integer(3);
    return this.radius;
}
public void setRadius(Integer radius) {
	this.radius = radius;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
public String getCity() {
	return city;
}
public void setCity(String city) {
	this.city = city;
}
public String getState() {
	return state;
}
public void setState(String state) {
	this.state = state;
}
public String getZip() {
	return zip;
}
public void setZip(String zip) {
	this.zip = zip;
}
    public String getGeoPoint() {
	return geoPoint;
}
public void setGeoPoint(String geoPoint) {
	this.geoPoint = geoPoint;
}
    Store[] stores;
    public Store[] getStores(){
        return stores;
    }
    public void setStores(Store[] storesIn){
        stores = storesIn;
    }

    int storesToShow;
    public int getStoresToShow(){
        if(storesToShow <= 0)
            storesToShow = 1000;//a bigger number for no limit
        return storesToShow;
    }
    public void setStoresToShow(int storesToShowIn){
        storesToShow = storesToShowIn;
    }
    long[] distances;
    public long[] getDistances(){
        return distances;
    }
    public void setDistances(long[] distancesIn){
        distances = distancesIn;
    }
    String errorCode;
    public String getErrorCode() {
    return errorCode;
}
public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
}
    public boolean isByState(){
       return (!StringUtils.isNullOrEmpty(state)
           && (StringUtils.isNullOrEmpty(address) && StringUtils.isNullOrEmpty(city) && StringUtils.isNullOrEmpty(zip)) );
    }
    public boolean isValidGeoPoint(){
        if(!StringUtils.isNullOrEmpty(geoPoint)){
            try{
                Float[] location = new Float[2];
                String[] pointString = geoPoint.split(",");
                location[1] = new Float(pointString[0]);
                location[0] = new Float(pointString[1]);
            }catch(Exception ex){
                return false;
            }
        }else{
            return false;
        }
        return true;
    }

    public Float[] getPoint(){
        if(!StringUtils.isNullOrEmpty(geoPoint)){
            try{
                Float[] location = new Float[2];
                String[] pointString = geoPoint.split(",");
                location[1] = new Float(pointString[0]);
                location[0] = new Float(pointString[1]);
                return location;
            }catch(Exception ex){
                //
            }
        }
        return null;
    }
    public String getAddressDescription(){
        String addressDescription = "";
        if(address != null && !address.equals(""))
                addressDescription += address + ", ";
        if(city != null && !city.equals(""))
                addressDescription += city + ", ";
        if(state != null && !state.equals(""))
                addressDescription += state + " ";
        if(zip != null && !zip.equals(""))
                addressDescription += zip;
        if(addressDescription.endsWith(", "))
           addressDescription = addressDescription.substring(0, addressDescription.length()-2);
        return addressDescription;
    }
	
}